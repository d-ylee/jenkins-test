pipeline {
    agent {
        label 'cms-dmwm-el9'
    }

    parameters {
        string(name: 'ghprbPullId', defaultValue: '')

        string(name: 'ghprbTargetBranch', defaultValue: 'master')
    }

    environment {
        MY_HOSTNAME = """${sh(
            returnStdout: true,
            script: 'hostname -f'
        ).trim()}"""

        MY_ID = """${sh(
            returnStdout: true,
            script: 'id -u'
        ).trim()}"""

        MY_GROUP = """${sh(
            returnStdout: true,
            script: 'id -g'
        ).trim()}"""

        HOST_MOUNT_DIR = "${env.WORKSPACE}"

        WMA_TAG = '2.3.3'
        COUCH_TAG = '3.2.2'
        MDB_TAG = '10.6.19'
        WMCORE_DEV_TAG = '0.2.0-stable'

        TEST_SERVICE = 'wmcore-pr-pylint'

    }

    stages {
        stage('Setup') {
            steps {
                git branch: 'main', url: 'https://github.com/dmwm/WMCore-Jenkins'
                sh '''
                   echo "Running WMCore-PR-pylint for ${ghprbPullId}"
                   echo "Setting up workspace directories"
                   $WORKSPACE/WMCore-Test-Base/setup-env.sh
                   ls $WORKSPACE
                   echo "python3 version"
                   python3 --version

                   echo "Ensuring all compose services are down"
                   docker compose -f $WORKSPACE/WMCore-Test-Base/docker-compose.yml down $TEST_SERVICE --rmi all
                   '''
            }
        }
        stage('Run pylint tests') {
            steps {
                sh ''' 
                   docker compose -f $WORKSPACE/WMCore-Test-Base/docker-compose.yml run -u $MY_ID --quiet-pull $TEST_SERVICE /home/cmsbld/TestScripts/pylintPRTest.sh
                   sleep 20
                   # docker compose -f $WORKSPACE/WMCore-Test-Base/docker-compose.yml exec -u $MY_ID $TEST_SERVICE /home/cmsbld/TestScripts/pylintPRTest.sh
                   '''
            }
        }
    }

    post {
        always {
            sh '''
               docker compose -f $WORKSPACE/WMCore-Test-Base/docker-compose.yml down $TEST_SERVICE --rmi all
               '''
            archiveArtifacts artifacts: 'artifacts/*.json, artifacts/pep*.txt',
                               followSymlinks: false,
                               fingerprint: true,
                               onlyIfSuccessful: true
            cleanWs()
        }
    }
}
