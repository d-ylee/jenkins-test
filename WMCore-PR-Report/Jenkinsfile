pipeline {
    agent {
        label 'cms-dmwm-el9'
    }

    environment {
        CODE_REPO = "WMCore"
        WMCORE_REPO = "dmwm"
        TargetIssueID = "0"
    }

    stages {
        stage('Setup') {
            steps {
                cleanWs()

                git branch: 'main', poll: false, url: 'https://github.com/d-ylee/jenkins-test'

                copyArtifacts filter: 'artifacts/nosetest*.xml',
                fingerprintArtifacts: true,
                projectName: 'WMCore-Unittest-Baseline',
                selector: lastSuccessful(),
                target: 'MasterUnitTests'

                copyArtifacts filter: 'artifacts/*.json, artifacts/pep*.txt',
                fingerprintArtifacts: true,
                projectName: 'WMCore-PR-pylint',
                selector: specific('298')

                copyArtifacts filter: 'artifacts/nosetest*.xml',
                fingerprintArtifacts: true,
                projectName: 'WMCore-Unittest-Baseline',
                selector: specific('293'),
                target: 'LatestUnitTests'

                sh '''
                echo "$(TZ=GMT date): Job name is $JOB_NAME"

                echo "Creating a venv at $WORKSPACE and installing dependencies"
                python3 -m venv .
                $WORKSPACE/bin/pip install jinja2 xunitparser PyGithub

                ls $WORKSPACE
                '''
            }
        }
        stage('Compare tests') {
            steps {
                sh '''
                git clone https://github.com/dmwm/WMCore code

                echo "$(TZ=GMT date): generating PR report..."

                JENKSIN_JINJA_TEMPLATE_PATH=$WORKSPACE/docker/wmcore-dev/templates \
                $WORKSPACE/bin/python $WORKSPACE/docker/wmcore-dev/ContainerScripts/PullRequestReport.py
                '''
            }
        }
    }

    post {
        always {
            archiveArtifacts artifacts: 'code/LatestTag, LatestUnitTests/*/nosetestspy3*.xml', followSymlinks: false

            junit testResults: 'artifacts/PullRequestReport.html',
            skipPublishingChecks: true,
            stdioRetention: ''

            cleanWs()
        }
    }
}