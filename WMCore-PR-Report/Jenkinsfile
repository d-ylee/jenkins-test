def pylintJob
def unittestJob

pipeline {
    agent {
        label 'cms-dmwm-el9'
   }

    environment {
        CODE_REPO = "WMCore"
        WMCORE_REPO = "dmwm"
        TargetIssueID = "0"
        DMWMBOT_TOKEN = credentials('d0bc4ba6-d9c5-4668-9839-1b7ff6f795fe')
    }

    stages {
        stage('Setup') {
            steps {
                cleanWs()

                git branch: 'wmcore-pr-report', poll: false, url: 'https://github.com/d-ylee/jenkins-test'

                sh '''
                echo "$(TZ=GMT date): Job name is $JOB_NAME"

                echo "Creating a venv at $WORKSPACE and installing dependencies"
                python3 -m venv .
                $WORKSPACE/bin/pip install jinja2 xunitparser PyGithub

                mkdir -p $WORKSPACE/artifacts
                '''
            }
        }
        stage('Update GitHub PR status') {
            steps {
                sh '''
                $WORKSPACE/bin/python $WORKSPACE/docker/wmcore-dev/ContainerScripts/PullRequestTestBegin.py
                '''
            }
        }
        stage('Trigger downstream PR tests') {
            parallel {
                stage('Trigger pylint') {
                    agent {
                        label 'cms-dmwm-el9'
                    }

                    steps {
                        script {
                            pylintJob = build(
                                job: 'WMCore-PR-pylint',
                                parameters: [
                                    string(name: 'ghprbPullId', value: "${env.ghprbPullId}"),
                                    string(name: 'ghprbTargetBranch', value: "${env.ghprbTargetBranch}")
                                ]
                            )
                        }
                    }
                }
                stage('Trigger unittests') {
                    agent {
                        label 'cms-dmwm-el9'
                    }

                    steps {
                        script {
                            unittestJob = build(
                                job: 'WMCore-PR-Test-khurtado',
                                propagate: false,
                                parameters: [
                                    string(name: 'ghprbPullId', value: "${env.ghprbPullId}"),
                                    string(name: 'ghprbTargetBranch', value: "${env.ghprbTargetBranch}")
                                ]
                            )
                        }
                    }
                }
            }
        }
        stage('Wait for tests and copy artifacts') {
            steps {
                copyArtifacts filter: 'artifacts/*.json, artifacts/pep*.txt',
                    fingerprintArtifacts: true,
                    flatten: true,
                    projectName: 'WMCore-PR-pylint',
                    selector: specific("${pylintJob.number}"),
                    target: 'LatestPylint'

                copyArtifacts filter: 'artifacts/nosetest*.xml',
                    fingerprintArtifacts: true,
                    projectName: 'WMCore-PR-Test-khurtado',
                    selector: specific("${unittestJob.number}"),
                    target: 'LatestUnitTests'

                copyArtifacts filter: 'artifacts/nosetest*.xml',
                    fingerprintArtifacts: true,
                    projectName: 'WMCore-Unittest-Baseline-khurtado',
                    selector: lastSuccessful(),
                    target: 'MasterUnitTests'
            }
        }
        stage('Generate Reports') {
            steps {
                sh '''
                echo "$(TZ=GMT date): generating PR report..."

                ls $WORKSPACE

                git clone https://github.com/dmwm/WMCore.git code

                cp $WORKSPACE/code/test/etc/UnstableTests.txt $WORKSPACE/UnstableTests.txt

                JENKINS_JINJA_TEMPLATE_PATH=$WORKSPACE/docker/wmcore-dev/templates \
                $WORKSPACE/bin/python $WORKSPACE/docker/wmcore-dev/ContainerScripts/PullRequestReport.py
                '''
            }
        }
    }

    post {
        always {
            archiveArtifacts artifacts: 'artifacts/PullRequestReport.html', followSymlinks: false

            cleanWs()
        }
    }
}