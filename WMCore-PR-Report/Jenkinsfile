pipeline {
    agent {
        label 'cms-dmwm-el9'
    }

    environment {
        CODE_REPO = "WMCore"
        WMCORE_REPO = "dmwm"
        TargetIssueID = "0"
    }

    stages {
        stage('Setup') {
            steps {
                cleanWs()

                git branch: 'main', poll: false, url: 'https://github.com/d-ylee/jenkins-test'

                sh '''
                echo "$(TZ=GMT date): Job name is $JOB_NAME"

                echo "Creating a venv at $WORKSPACE and installing dependencies"
                python3 -m venv .
                $WORKSPACE/bin/pip install jinja2 xunitparser PyGithub

                mkdir -p $WORKSPACE/artifacts

                ls $WORKSPACE
                '''
            }
        }
        stage('Trigger downstream PR tests') {
            parallel {
                stage('Trigger pylint') {
                    steps {
                        script {
                            def builtPylint = build(
                                job: 'WMCore-PR-pylint',
                                parameters: [
                                    string(name: 'ghprbPullId', value: "${env.ghprbPullId}"),
                                    string(name: 'ghprbTargetBranch', value: "${env.ghprbTargetBranch}")
                                ]
                            )

                            copyArtifacts(
                                filter: 'artifacts/*.json, artifacts/pep*.txt',
                                fingerprintArtifacts: true,
                                flatten: true,
                                projectName: 'WMCore-PR-pylint',
                                selector: specific("${builtPylint.number}") 
                            )
                        }
                    }
                }
                stage('Trigger unittests') {
                    steps {
                        script {
                            def builtTest = build(
                                job: 'WMCore-PR-Test-khurtado',
                                propagate: false,
                                parameters: [
                                    string(name: 'ghprbPullId', value: "${env.ghprbPullId}"),
                                    string(name: 'ghprbTargetBranch', value: "${env.ghprbTargetBranch}")
                                ]
                            )

                            copyArtifacts(
                                filter: 'artifacts/nosetest*.xml',
                                fingerprintArtifacts: true,
                                projectName: 'WMCore-PR-Test-khurtado',
                                selector: specific("${builtTest.number}"),
                                target: 'LatestUnitTests'
                            )
                        }
                    }
                }
            }
        }
        stage('Copy baseline test artifacts') {
            steps {
                copyArtifacts filter: 'artifacts/nosetest*.xml',
                fingerprintArtifacts: true,
                projectName: 'WMCore-Unittest-Baseline-khurtado',
                selector: lastSuccessful(),
                target: 'MasterUnitTests'
            }
        }
        stage('Generate Reports') {
            steps {
                sh '''
                echo "$(TZ=GMT date): generating PR report..."

                JENKINS_JINJA_TEMPLATE_PATH=$WORKSPACE/docker/wmcore-dev/templates \
                $WORKSPACE/bin/python $WORKSPACE/docker/wmcore-dev/ContainerScripts/PullRequestReport.py
                '''
            }
        }
    }

    post {
        always {
            archiveArtifacts artifacts: 'artifacts/PullRequestReport.html', followSymlinks: false

            cleanWs()
        }
    }
}